<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Alistair Leszkiewicz]]></title>
  <link href="http://blog.amleszk.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.amleszk.com/"/>
  <updated>2015-04-06T08:30:03-04:00</updated>
  <id>http://blog.amleszk.com/</id>
  <author>
    <name><![CDATA[amleszk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unit testing block based callbacks]]></title>
    <link href="http://blog.amleszk.com/blog/2013/10/19/unit-testing-block-based-callbacks/"/>
    <updated>2013-10-19T20:11:00-04:00</updated>
    <id>http://blog.amleszk.com/blog/2013/10/19/unit-testing-block-based-callbacks</id>
    <content type="html"><![CDATA[<p>I recently tackled unit testing my AFNetworking client classes, which use block based callbacks, stubbing out block callbacks took some trial and error so is worth of a blogpost.</p>

<p>Take the example method:</p>

<p>```
&ndash; (AFHTTPRequestOperation<em>)meWithSuccess:(void (^)(AFHTTPRequestOperation </em>operation, NSDictionary *responseObject))success</p>

<pre><code>                             failure:(void (^)(AFHTTPRequestOperation *operation, NSError *error))failure
</code></pre>

<p>```</p>

<p>How would you go about mocking/stubbing this method call? One way is to use <a href="http://ocmock.org/">OCMock expectations</a>. In your unit test setUp:</p>

<p>```
self.stubMessagesPayload = @{</p>

<pre><code> @"has_mail" : @0,
 @"has_mod_mail" : @0,
</code></pre>

<p>};</p>

<p>_client = [OCMockObject mockForClass:[AFRedditAPIClient class]];</p>

<p>[[[_client expect] andDo:^(NSInvocation *invocation) {</p>

<pre><code>void (^__unsafe_unretained successStub)(AFHTTPRequestOperation *, NSDictionary *);
[invocation getArgument:(&amp;successStub) atIndex:2];

successStub(nil,self.stubMessagesPayload);
</code></pre>

<p>}] meWithSuccess:[OCMArg any] failure:[OCMArg any]];</p>

<p>```</p>

<p>In the actual test, you can change the value of <code>stubMessagesPayload</code> and assert different behaviour. You&rsquo;ll also notice the block argument is located at index 2, <a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/foundation/classes/NSInvocation_Class/Reference/Reference.html#//apple_ref/occ/instm/NSInvocation/getArgument:atIndex:">from the documentation</a>:</p>

<p><code>Indices 0 and 1 indicate the hidden arguments self and _cmd, respectively; these values can be retrieved directly with the target and selector methods. Use indices 2 and greater for the arguments normally passed in a message.</code></p>

<p>The other issue you may face is how to get your class to actually use the mocked version of your object. The code under test may look like this:</p>

<p>```</p>

<pre><code>[[AFRedditAPIClient sharedClient] meWithSuccess:^(AFHTTPRequestOperation *operation, NSDictionary *responseObject) {
NSLog(@"success");
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
NSLog(@"failure");
}];
</code></pre>

<p>```</p>

<p>The only way to stub a class method is via swizzling, which can get messy. The alternative is dependency injection, whereby you expose object dependencies using properties or constructor varaibles. Then they can be swapped more easily at runtime, so if the <code>AFRedditAPIClient</code> object where a public property, and <code>RCMessageClient</code> were the class i wanted to test, expose the dependency using a property and in the test asign it to the mock object:</p>

<p><code>
_apiClient = [OCMockObject mockForClass:[AFRedditAPIClient class]];
_messageClient = [[RCMessageClient alloc] init];
_messageClient.apiClient = _apiClient
...
Additional stubs explained above
...
</code></p>

<p>And the implementation changes to refer to that property instead of the class method:</p>

<p>```</p>

<pre><code>[_apiClient meWithSuccess:^(AFHTTPRequestOperation *operation, NSDictionary *responseObject) {
NSLog(@"success");
} failure:^(AFHTTPRequestOperation *operation, NSError *error) {
NSLog(@"failure");
}];
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[e3 visa expedition]]></title>
    <link href="http://blog.amleszk.com/blog/2013/09/05/e3-visa-expedition/"/>
    <updated>2013-09-05T18:46:00-04:00</updated>
    <id>http://blog.amleszk.com/blog/2013/09/05/e3-visa-expedition</id>
    <content type="html"><![CDATA[<p>This post is about a recent US tour I took with the goal of finding work as an iOS Developer in New York.
In March of this year I made the decision to quit my job and take the plunge. I was solo, and planned accommodation only 1-2 weeks in advance, so had a huge amount of flexibility.</p>

<p>Another factor for the timing was the <a href="https://developer.apple.com/wwdc/">WWDC</a> conference. I didn&rsquo;t get a ticket the amount of side events and <a href="http://altwwdc.com">altWWDC</a> made it more than worth it.</p>

<p>I was there for 4 months, did a lot of of sight seeing also, but we&rsquo;ll skip over that.</p>

<h3><strong>Getting around</strong></h3>

<p>I was &lsquo;on the cheap&rsquo; so flew Jetstar <em>Melbourne > Honolulu</em> ($700) then <em>Honolulu > Vancouver</em> ($220). Once on the mainland the <a href="http://megabus.com">Megabus</a> and <a href="http://greyhound.com">Greyhound</a> were the preferred mode of transport. Both cheap and allow for great flexibility, the clientele can be pretty rough though.</p>

<h3><strong>Looking online</strong></h3>

<p>I stayed away from traditional job seek sites, the amount of recruiter spam seemed massive (cybercoders??). Resources:</p>

<ul>
<li>Hackernews : <a href="http://hnhiring.com">http://hnhiring.com</a></li>
<li>Hackernews alt : <a href="http://curatedhnhiring.com/">http://curatedhnhiring.com/</a></li>
<li><a href="http://getuncubed.com">Uncubed (NYC only)</a></li>
<li><a href="http://mappedinny.com/">Made in NY (NYC only)</a></li>
<li><a href="http://careers.stackoverflow.com">Stackoverflow</a></li>
<li><a href="http://jobs.37signals.com">37 Signals</a></li>
<li><a href="https://jobs.github.com/">Github</a></li>
<li><a href="https://angel.co">Angel list</a></li>
<li><a href="http://www.garysguide.com/jobs">Garysguide</a></li>
<li><a href="http://nycstartupjobfair.com/startup-list/">NYC Startup job fair</a></li>
</ul>


<h3><strong>Events / Meetups</strong></h3>

<p>Every city hosts tech meetups and networking events, some resources for meetups:</p>

<ul>
<li><a href="http://meetup.com">Meetup</a></li>
<li><a href="http://www.garysguide.com/events">Garysguide</a></li>
<li><a href="http://cocoaheads.org/">Cocoaheads</a></li>
<li><a href="http://www.eventbrite.com/">Eventbright</a></li>
</ul>


<h3><strong>Interviews</strong></h3>

<p>I had about 20 interviews before landing a position, split 50/50 between phone and face to face. Numerous companies  follow the Google approach of</p>

<ul>
<li>1 or 2 phone screens</li>
<li>3-5 interviews in one day, each interview with one person.</li>
</ul>


<p>Each interview was one or two coding questions and some general resume interogation. Having a portfolio of public facing apps is expected, if not then some open source projects.</p>

<h3><strong>Code questions</strong></h3>

<p>I found the following process to be helpful for programming questions, taken from:
<a href="http://www.amazon.com/Programming-Problems-Primer-Technical-Interview/dp/1475071965"><em>Programming problems : A Primer for the technical interview</em> by B. Green.</a> A summary:</p>

<p><strong>1. Reframe:</strong> say the problem back to the interviewer, allowing ambiguities to be addressed. And a way to get hints</p>

<p><strong>2. Write test cases:</strong> Builds upon step 1, confirms you and your interviewer are on the same page, will help you formulate your solution. Truth tables, expected output for input, corner cases. write them all down without writing the solution</p>

<p><strong>3. Diagram a solution:<a href="/images/posts/owl.jpg">(e.g)</a>:</strong> There&rsquo;s not many general purpose helpers here, hopefully you will have an idea of how to approach the problem based on the test cases and your discussions with the interviewer. Think out loud, they will provide hints if you are stuck.</p>

<p><strong>4. Coding </strong>: I like to start start high level and invent lower level functions, keep variable/function names short as possible.</p>

<p><strong>5. Run the test cases from #2</strong>: Confirms your solution and allows interviewer to critque</p>

<p><strong>See also:</strong> &ndash; <a href="http://peterschaadt.com/blog/2013/03/30/interviewing-the-interviewer/">Interviewing the Interviewer</a>
&ndash; <a href="http://www.youtube.com/watch?v=oWbUtlUhwa8&amp;feature=youtu.be">Candidate Coaching Session</a></p>

<h3><strong>E3 Visa</strong></h3>

<h4><strong>Documents</strong></h4>

<p>The formulation of documents for my visa was handled by <a href="http://visanow.com">visanow</a>. The process took abou 3 weeks but was pretty straight forward, they have a checklist style interface and good customer service.</p>

<p><img src="/images/posts/visanow-e3.png" alt="visa list" /></p>

<h4><strong>Interview</strong></h4>

<p>Held at St. kilda road Melbourne, I had booked for 9:30, arrived at 9 and waited until 10:30 to be seen. There&rsquo;s an airport style security check where you&rsquo;ll relinquish any devices.</p>

<p>I bought everything listed from visanow along with some bank statements, bring everything you think will help, but don&rsquo;t forget:</p>

<ul>
<li>Printed copy of interview confirmation page</li>
<li>DS 160 confirmation page</li>
<li>Letter of endorsement from your employer</li>
<li>Labour condition agreement (ETA form 9035 &amp; 9035E)</li>
<li>DHS Form G28</li>
</ul>


<h3><strong>Done!</strong></h3>

<p>Almost hard to belive once it happens, the pipe dream is a reality. My role as iOS Developer at <a href="http://meetup.com">Meetup</a> starts in a few weeks, one adventure ends and another is beginning. Thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
